name: CI

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  repository_dispatch:
    types: [run_build]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ${{ matrix.os[0] }}
    strategy:
      matrix:
        os: [
          [macos-latest, arm64, bash, "macos-latest", null, " "],
          [macos-13, x86_64, bash, "macos-13", null, " "],
          [ubuntu-latest, x86_64, bash, "ubuntu-latest", "ubuntu:20.04", "--user 0"],
          [ubuntu-24.04-arm, arm64, bash, "ubuntu-latest-arm", "ubuntu:20.04", "--user 0"],
          [windows-latest, x86_64, msys2, "windows-latest", null, " "]
        ]
      fail-fast: false
    defaults:
     run:
      shell: ${{ matrix.os[2] }} {0}
    container:
      image: ${{ matrix.os[4] }}
      options: ${{ matrix.os[5] }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Ubuntu packages
      if: startsWith(matrix.os[0], 'ubuntu')
      run: |
        apt-get -y update && apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install texinfo bison flex gettext autopoint autoconf automake libgmp3-dev libmpfr-dev libmpc-dev

    - name: Install macOS packages
      if: startsWith(matrix.os[0], 'macos')
      run: |
        brew update
        brew install texinfo bison flex gnu-sed autoconf automake libtool gsl gmp mpfr libmpc md5sha1sum

    - name: Install MSYS2 packages
      if: matrix.os[0] == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        install: |
          base-devel git make texinfo flex bison patch binutils mpc-devel tar
          autotools gettext gettext-devel
          mingw-w64-i686-readline mingw-w64-i686-gcc
          mingw-w64-i686-cmake mingw-w64-i686-make mingw-w64-i686-libogg
        update: true

    - name: Runs all the stages in the shell
      run: |
        export PATH="$(brew --prefix gnu-sed)/libexec/gnubin:$PATH" # This is just needed for MacOS
        export PS2DEV=$PWD/ps2dev
        export PS2SDK=$PS2DEV/ps2sdk
        export GSKIT=$PS2DEV/gsKit
        export PATH=$PATH:$PS2DEV/bin:$PS2DEV/ee/bin:$PS2DEV/iop/bin:$PS2DEV/dvp/bin:$PS2SDK/bin
        ./build-all.sh

    - name: Get short SHA
      id: slug
      run: echo "sha8=${MSYSTEM}-sha[$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

    - name: Prepare ps2dev folder
      run: |
        tar -zcvf ps2dev-${{matrix.os[3]}}.tar.gz ps2dev

    - uses: actions/upload-artifact@v4
      with:
        name: ps2dev-${{matrix.os[3]}}-ps2dev-${{matrix.os[1]}}-${{ steps.slug.outputs.sha8 }}
        path: ps2dev-${{matrix.os[3]}}.tar.gz

    - name: Extract tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create pre-release
      if: github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        files: ps2dev-${{matrix.os[3]}}.tar.gz
        prerelease: true
        name: "Development build"
        tag_name: "latest"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ps2dev-${{matrix.os[3]}}.tar.gz
        tag_name: ${{ steps.tag.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
